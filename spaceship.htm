<html>
<head>
    <title>SpaceShip</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">

    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="background.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>
    <script type="text/javascript" src="splat.js"></script>
    <script type="text/javascript" src="splatAdverse.js"></script>
    <script type="text/javascript" src="splatGameOver.js"></script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant
      
      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      vec2 hash22(vec2 p) {
	  vec2 q = vec2(dot(p,vec2(127.1,311.7)), 
			dot(p,vec2(269.5,183.3)));
	  return fract(sin(q)*43758.5453123)*2.-1.;
      }

      float gnoise(in vec2 x) {
	  vec2 p = floor(x);
	  vec2 f = fract(x);
	  vec2 m = f*f*(3.-2.*f);
	  
	  return mix(
	      mix(dot(hash22(p+vec2(0.,0.)),f-vec2(0.,0.)),
		  dot(hash22(p+vec2(1.,0.)),f-vec2(1.,0.)),m.x),
	      mix(dot(hash22(p+vec2(0.,1.)),f-vec2(0.,1.)),
		  dot(hash22(p+vec2(1.,1.)),f-vec2(1.,1.)),m.x),m.y);
      }
      
      float fractalNoise(in vec2 p) {
       	  const int nb = 5; // nb octave
       	  float f = uFrequency; // frequency
       	  float a = uAmplitude; // amplitude
       	  float e = uPersistence; // persistence

       	  float n = 0.0;
       	  for(int i=0;i<nb;++i) {
              n = n + a*gnoise(p*f);
              f = 2.0*f;
              a = a*e;
       	  }
       	  return n;
      }

      float computeHeight(in vec2 p) {
	  // vous pouvez modifier cette fonction comme vous
	  // le souhaitez pour fabriquer votre propre background
	  return fractalNoise(p)*0.5+0.5;
      }

      vec3 computeNormal(in vec2 p) {
	  float scale = 70.0;
	  float xp = computeHeight(p+vec2( 0.001,0.0));
	  float xm = computeHeight(p+vec2(-0.001,0.0));
	  float yp = computeHeight(p+vec2(0.0, 0.001));
	  float ym = computeHeight(p+vec2(0.0,-0.001));
	  
	  float gx = 0.5*(xp-xm)*scale;
	  float gy = 0.5*(yp-ym)*scale;

	  vec3 v1 = normalize(vec3(1.0,0.0,gx));
	  vec3 v2 = normalize(vec3(0.0,1.0,gy));

	  return cross(v1,v2);
      }
      
      void main(void) {
	  // d�calage avec la variable uOffset
	  vec2 p = vTextureCoord*2.0-vec2(1.0)+uOffset;

	  float d = computeHeight(p); // profondeur au point p
	  vec3 n = computeNormal(p); // normale au point p

	  vec3 gris = vec3(.28,.7,.7);
	  vec3 bleu = vec3(.1,.3,.8);
	  vec3 blanc = vec3(1.,1.,1.);

        if (d <= -.3) {
			outColor = vec4(bleu*n[1]*n[2]+bleu/2.,1.);
		// de l'herbe sinon
		} else if (d <= 1.5) {
			outColor = vec4(gris*n[1]*n[2]+gris/2.,1.);
		} else {
			outColor = vec4(blanc*n[1]*n[2]+blanc/2.,1.);
		}

	  // affichage de la profondeur
	  //outColor = vec4(d,d,0.5,1.0);

	  // affichage de la normale
	  //outColor = vec4(n,1.0);
      }

    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;
      
      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      
      out vec3 vNormal;

      void main(void) {
          // projection de la position
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }
    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant
      
    in vec3 vNormal;
      out vec4 outColor;


      void main(void) {
		// la couleur est attribuee au fragment courant
		vec3 n = normalize(vNormal);
		vec3 v = vec3(0.0,0.0,-1.0);
		vec3 l = normalize(vec3(-0.2,0.0,1.0));
		vec3 r = reflect(-l,n);

		float s = 50.0;

		vec3 Kd = vec3(.48,.48,.48);
		vec3 Ks = vec3(1.0);
		float diff = max(dot(l,n),0.0);
		float spec = pow(max(dot(r,v),0.0),s);

		// pour le moment, on affiche juste la normale
		outColor = vec4(Kd*diff + Ks*spec, 1.0);
	}
    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 
      
      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee
      
      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);
	  
	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleur;
      uniform sampler2D uTex;
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      
      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));

	  // TEST: affichae d'un point avec la couleur donn�e en param�tre
	  //outColor = vec4(alpha*maCouleur,alpha);

	  // TEST: affichage d'une texture donn�e en param�tre
	  outColor = texture(uTex,vTextureCoord);
      }
    </script>
    <script id="splat-vs-adverse" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec3 uAdversePosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uAdversePosition.xy,uAdversePosition.z, 1.0);

	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="splat-fs-adverse" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maAdverseCouleur;
      uniform sampler2D uAdverseTex;
      in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));

	  // TEST: affichae d'un point avec la couleur donn�e en param�tre
	  //outColor = vec4(alpha*maCouleur,alpha);

	  // TEST: affichage d'une texture donn�e en param�tre
	  outColor = texture(uAdverseTex,vTextureCoord);
      }
    </script>
    <script id="splatGameOver-vs" type="x-shader/x-vertex">#version 300 es
	// *** le vertex shader ***
	layout(location=0) in vec3 aVertexPosition;
	layout(location=1) in vec2 aVertexCoord;

	uniform vec3 uPosition;
	out vec2 vTextureCoord;

	void main(void) {
		// projection de la position
		gl_Position = vec4(aVertexPosition.xy+uPosition.xy, uPosition.z, 1.0);

		// stockage de la coordonnee de texture
		vTextureCoord = aVertexCoord;
	}

	</script>
    <script id="splatGameOver-fs" type="x-shader/x-fragment">#version 300 es
	// *** le fragment shader ***
	precision highp float;

	uniform vec3 maCouleur;
	uniform sampler2D uTex;

	in vec2 vTextureCoord;
	out vec4 outColor;

	void main(void) {
		float alpha = 1.-smoothstep(0.2, 0.25, distance(vec2(.5), vTextureCoord));

		// TEST: affichae d'un point avec la couleur donn�e en param�tre
		//outColor = vec4(alpha*maCouleur,alpha);

		// TEST: affichage d'une texture donn�e en param�tre
		outColor = texture(uTex, vTextureCoord);
	}
	</script>

    <script type="text/javascript">

        var background;
        var spaceship;
        var adversaireArray = [];
        var eclairArray = [];
        var eclairAutorise = true;
        var tex;
        var texAdverse;
        var textGameOver;
        var gameOver;

        function drawScene() {
            // initialisation du viewport
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            // efface les buffers de couleur et de profondeur
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // dessin du fond (d�commenter pour travailler dessus)
            gl.useProgram(background.shader());
            background.sendUniformVariables();
            background.draw();

            // dessin du vaisseau
            gl.useProgram(spaceship.shader());
            spaceship.sendUniformVariables();
            spaceship.draw();

            gl.enable(gl.BLEND);
            //Tableau dessine les éclairs
            eclairArray.forEach(eclair => {
                gl.useProgram(eclair.shader());
                eclair.sendUniformVariables();
                eclair.draw();
            });
        // Tableau qui dessine les adversaires
            adversaireArray.forEach(adversaire => {
                gl.useProgram(adversaire.shader());
                adversaire.sendUniformVariables();
                adversaire.draw();
            });

            // dessin GameOver
            gl.useProgram(gameOver.shader());
            gameOver.sendUniformVariables();
            gameOver.draw();

            gl.disable(gl.BLEND); // transparence d�sactiv�e
        }

        // une bonne maniere de gerer les evenements claviers
        var currentlyPressedKeys = {};

        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function handleKeys() {
            // vous pouvez utiliser ce genre de fonction
            // pour faire bouger votre vaisseau
            // par exemple :

            if (currentlyPressedKeys[68]) { // D
                spaceship.move(1, 0);
            }

            if (currentlyPressedKeys[81]) { // Q
                spaceship.move(-1, 0);
            }

            if (currentlyPressedKeys[90]) { // Z
                spaceship.move(0, 1);
            }

            if (currentlyPressedKeys[83]) { // S
                spaceship.move(0, -1);
            }

            if (currentlyPressedKeys[77]) { // M
                // juste un test pour supprimer un splat (tir)
                // shootSample.clear();
            }

            if (currentlyPressedKeys[32]) { // SPACE
                // exemple: comment positionner un splat devant le vaisseau
                var p = spaceship.getBBox(); // boite englobante du vaisseau sur l'�cran
                var x = (p[0][0] + p[1][0]) / 2;
                var y = p[1][1];
                var z = p[1][2] + 0.005; // profondeur du splat (juste derriere le vaisseau)

                // On créé notre éclair à l'appui de la touche espace, avec un temps entre les éclairs de 0.3 secondes, et si il est possible d'en lancer
                if (timeNow - lastTimeEclair > 300 && eclairAutorise || lastTimeEclair === 0 && eclairAutorise) {
                    var eclair = new Splat(tex);

                    eclair.setPosition(x, y, z);
                    eclairArray.push(eclair);
                    lastTimeEclair = timeNow;
                }
            }

        }

        // animation
        var lastTime = 0;
        var lastTimeEclair = 0;
        var lastTimeAdverse = 0;
        var timeNow;
        var score = 0;

        function animate() {
            // fonction appel�e � chaque frame, permet d'animer la sc�ne
            timeNow = new Date().getTime();
            if (lastTime !== 0) {
                // anime chacun des objets de la scene
                // si necessaire (en fonction du temps ecoul�)
                var elapsed = timeNow - lastTime;
                spaceship.setParameters(elapsed);
                background.setParameters(elapsed);

                eclairArray.forEach(eclair => {
                    eclair.setParameters(elapsed);
                    // SI l'éclair sort du cadre, on l'efface
                    if (eclair.position[1] > 1) {
                        eclair.clear();
                    }
                });

                adversaireArray.forEach(adversaire => {
                    adversaire.setParameters(elapsed);
                    // SI l'adversaire sort du cadre, on l'efface
                    if (adversaire.position[1] < -1) {
                        adversaire.clear();
                    }
                });

                // Collision entre un adversaire et un eclair
                adversaireArray.forEach(adversaire => {
                    eclairArray.forEach(eclair => {
                        // Si leurs positions croisent, alors on les détruits, et on ajoute du score
                        if (adversaire.position[0] < eclair.position[0] + eclair.width
                            && adversaire.position[0] + adversaire.width > eclair.position[0]
                            && adversaire.position[1] < eclair.position[1] + eclair.width
                            && adversaire.position[1] + adversaire.width > eclair.position[1]) {

                            adversaire.clear();
                            eclair.clear();
                            getScore();

                        }
                    });
                });

                // Collision entre les adversaire et notre modele (Harry Potter)
                adversaireArray.forEach(adversaire => {
                    var positions = spaceship.getBBox();
                    var x1 = positions[0][0];
                    var x2 = positions[1][0];
                    var y1 = positions[0][1];
                    var y2 = positions[1][1];

                    // Si leurs positions se croisentn on les détruit tous les deux et on affiche un game over
                    if (adversaire.position[0] > x1 && adversaire.position[0] < x2 && adversaire.position[1] > y1 && adversaire.position[1] < y2) {
                        spaceship.clear();
                        adversaire.clear();
                        setEclairAutorise();

                        gameOver.setPosition(0, 0, 0);
                        gameOver.setParameters(elapsed);
                    }
                });

                eclairArray = eclairArray.filter(eclair => eclair.loaded);
                adversaireArray = adversaireArray.filter(adversaire => adversaire.loaded);

                // On genere des adversaires toutes les 0.5 secondes
                if (timeNow - lastTimeAdverse > 500) {
                    adversaire = new SplatAdverse(texAdverse);
                    adversaireArray.push(adversaire);
                    lastTimeAdverse = timeNow;
                }

            }
            lastTime = timeNow;
        }

        function tick() {
            requestAnimFrame(tick);
            handleKeys();
            drawScene();
            animate();
        }


        function webGLStart() {
            // initialisation du canvas et des objets OpenGL
            var canvas = document.getElementById("SpaceShip");
            initGL(canvas);

            // test: cr�ation d'une texture
            tex = initTexture('textures/eclair.png');
            texAdverse = initTexture('textures/ghost.png');

            textGameOver = initTexture('textures/over.png');
            gameOver = new SplatGameOver(textGameOver);
            gameOver.position[1] = 6;
            textGameOver.width = 1;
            textGameOver.height = 1;

            initBackgroundShader();
            initModelShader();
            initSplatShader();
            initSplatShaderGameOver();

            //heightfield = new Heightfield();
            background = new Background();
            spaceship = new Model('models/harry.obj');
            // shootSample = new Splat(tex);
            // la couleur de fond sera grise fonc�e
            gl.clearColor(0.5, 0.5, 0.5, 1.0);

            // active le test de profondeur
            gl.enable(gl.DEPTH_TEST);

            // fonction de m�lange utilis�e pour la transparence
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            // dessine la scene
            tick();
        }

        // Affichage du score
        function getScore() {
            score = score + 300;
            document.getElementById("score").innerHTML = score;
        }

        // Interdit de lancer des éclairs
        function setEclairAutorise() {
            this.eclairAutorise = false;
        }


    </script>


</head>


<body onload="webGLStart();">
<div style="text-align:center">
<div>
    <h1>Score : <span id="score">0</span></h1>
</div>
    <canvas id="SpaceShip" style="border: none;" width="1000" height="800"></canvas>
</div>
</body>
</html>
